def extract_value(data, keys, trim_prefix=None):
    """Extracts a value from a nested JSON object using a list of keys.
    If trim_prefix is provided, it removes the first N characters from the value.
    """
    print(f"\nüîç Extracting value for path: {'/'.join(keys)}")

    for key in keys:
        if isinstance(data, dict) and key in data:
            data = data[key]  # Move deeper into the JSON structure
        else:
            print(f"‚ö†Ô∏è Warning: Key '{key}' not found in JSON structure.")
            return None  # Return None if the key doesn't exist
    
    if isinstance(data, str) and trim_prefix:
        print(f"‚úÇÔ∏è Trimming first {trim_prefix} characters from: {data}")
        data = data[trim_prefix:]  # Remove first N characters
    
    print(f"‚úÖ Extracted Value: {data}")
    return data  # Return the final extracted value


def find_matching_legacy_record(payer_value, legacy_data, legacy_path):
    """Searches for a matching payer value in the Legacy JSON using a given path."""
    print(f"\nüîç Searching for Payer Value '{payer_value}' in Legacy JSON at path: {legacy_path}")

    # Extract the list of claims
    claims_list = extract_value(legacy_data, legacy_path.split('/'))

    if not claims_list or not isinstance(claims_list, list):
        print("‚ö†Ô∏è Warning: No claims found in Legacy JSON or invalid structure.")
        return None

    # Iterate through each claim and check for a match
    for claim in claims_list:
        legacy_claim_number = extract_value(claim, ["claimInfoCodes", "claimNumber"])
        if legacy_claim_number == payer_value:
            print(f"‚úÖ Match Found in Legacy JSON: {claim}")
            return claim  # Return the full matching claim record

    print("‚ùå No Match Found in Legacy JSON.")
    return None  # Return None if no match is found
