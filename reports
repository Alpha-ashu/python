import os
import json
import logging
import pandas as pd
from openpyxl import Workbook

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Get the directory where the script is located
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

# File paths
BASE_DIRECTORY = os.path.join(BASE_DIR, "target", "filteredRecord")
MAPPING_FILE_PATH = os.path.join(BASE_DIR, "config", "mapping.xlsx")
OUTPUT_EXCEL_PATH = os.path.join(BASE_DIR, "target", "output", "output.xlsx")
OUTPUT_JSON_PATH = os.path.join(BASE_DIR, "target", "output", "output_matched.json")

def read_mapping(file_path):
    """ Reads an Excel file (Sheet Two) and returns a mapping dictionary {old_path: new_path} """
    mapping = {}
    try:
        df = pd.read_excel(file_path, sheet_name=1)  # Reads the second sheet (0-based index)
        for _, row in df.iterrows():
            if pd.notna(row.iloc[0]) and pd.notna(row.iloc[1]):  # Ensure both columns have values
                mapping[row.iloc[0]] = row.iloc[1]
    except Exception as e:
        logger.error(f"Error reading mapping file: {e}")
    return mapping

def process_paths(old_json, new_json, old_path, new_path):
    """ Retrieves values from JSON using mapped paths and compares them. """
    old_value = old_json.get(old_path, "null")
    new_value = new_json.get(new_path, "null")

    match_status = "Matched" if old_value == new_value else "Not Matched"
    if old_value and new_value and (old_value.lower() in new_value.lower() or new_value.lower() in old_value.lower()):
        match_status = "Partial Match"

    return old_path, new_path, old_value, new_value, match_status

def main():
    try:
        mapping = read_mapping(MAPPING_FILE_PATH)
        workbook = Workbook()
        consolidated_sheet = workbook.active
        consolidated_sheet.title = "Consolidated"
        consolidated_sheet.append(["Record Name", "Coverage Percentage", "Matched Values"])

        aggregated_json_results = {}

        if os.path.exists(BASE_DIRECTORY):
            for folder in os.listdir(BASE_DIRECTORY):
                folder_path = os.path.join(BASE_DIRECTORY, folder)
                if os.path.isdir(folder_path):
                    legacy_file = os.path.join(folder_path, f"Legacy_{folder}.json")
                    payer_file = os.path.join(folder_path, f"Payer_{folder}.json")

                    if os.path.exists(legacy_file) and os.path.exists(payer_file):
                        with open(legacy_file, "r", encoding="utf-8") as f:
                            legacy_json = json.load(f)
                        with open(payer_file, "r", encoding="utf-8") as f:
                            payer_json = json.load(f)

                        sheet = workbook.create_sheet(title=folder[:30])  # Excel sheet names must be â‰¤ 31 chars
                        sheet.append(["Old Path", "New Path", "Old Value", "New Value", "Matched/Not Matched"])

                        matched_count = 0
                        total_keys = len(mapping)

                        for old_path, new_path in mapping.items():
                            result = process_paths(legacy_json, payer_json, old_path, new_path)
                            sheet.append(result)
                            if result[-1] == "Matched":
                                matched_count += 1

                        coverage_percentage = (matched_count / total_keys) * 100 if total_keys > 0 else 0
                        consolidated_sheet.append([folder, f"{coverage_percentage:.2f}%", f"{matched_count}/{total_keys}"])
                    else:
                        logger.warning(f"Skipping folder '{folder}' as required files are missing.")

        workbook.save(OUTPUT_EXCEL_PATH)
        logger.info(f"Comparison complete. Output written to {OUTPUT_EXCEL_PATH}")

    except Exception as e:
        logger.error(f"An error occurred during comparison: {e}")

if __name__ == "__main__":
    main()
